version: '2.2'
services:

  elasticsearch:
    build:
      context: es/
      args:
        ELKA_VERSION: $ELKA_VERSION
    container_name: zorro1-elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - transport.host=127.0.0.1
      - "ES_JAVA_OPTS:-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - "./es/data:/usr/share/elasticsearch/data"
      - "./es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro"
      - "./es/config/elasticsearch.yml:/usr/share/elasticsearch/config/logging.yml:ro"
      - "./es/backups:/var/backups"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - elkanet

  logstash:
    build:
      context: logstash/
      args:
        ELKA_VERSION: $ELKA_VERSION
    container_name: zorro1-logstash
    environment:
      - "LOG_LEVEL=info"
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      - "XPACK_MONITORING_ELASTICSEARCH_URL=http://zorro1-elasticsearch:9200"
    ports:
      - "5000:5000"
    volumes:
      - "./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.ym:ro"
      - "./logstash/pipeline:/usr/share/logstash/pipeline"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elkanet

  kibana:
    build:
      context: kibana/
      args:
        ELKA_VERSION: $ELKA_VERSION
    container_name: zorro1-kibana
    environment:
      ELASTICSEARCH_URL: "http://zorro1-elasticsearch:9200"
      XPACK_MONITORING_ENABLED: "false"
    expose:
        - "5601"
    ports:
      - "5601:5601"
    volumes:
      - "./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-s", "-f", "http://localhost:5601/"]
      retries: 10
    networks:
      elkanet:
        aliases:
          - zorro1-kibana

  apm-server:
    build:
      context: apm-server/
      args:
        ELKA_VERSION: $ELKA_VERSION
    container_name: "zorro1-apm-server"
    ports:
      - "8200:8200"
    volumes:
      - "./apm-server/config/apm-server.yml:/usr/share/apm-server/apm-server.yml:ro"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      elkanet:
        aliases:
          - zorro1-apm

  # APM testing services:

  service1:
      build:
        context: ./nodeproxy
        dockerfile: Dockerfile
      environment:
        - APM_SERVER_URL=http://zorro1-apm:8200
        - SERVICE_NAME=service1
        - PORT=80
        - FOWARD_TO=http://service2:80/service/2
      expose:
        - "80"
      ports:
        - "3001:80"
      networks:
        elkanet:
          aliases:
            - service1
      depends_on:
        apm-server:
          condition: service_started

  service2:
      build:
        context: ./nodeproxy
        dockerfile: Dockerfile
      environment:
        - APM_SERVER_URL=http://zorro1-apm:8200
        - SERVICE_NAME=service2
        - PORT=80
        - FOWARD_TO=http://service2:80/service/3
      expose:
        - "80"
      ports:
        - "3002:80"
      networks:
        elkanet:
          aliases:
            - service2
      depends_on:
        apm-server:
          condition: service_started

  service3:
      build:
        context: ./nodeproxy
        dockerfile: Dockerfile
      environment:
        - APM_SERVER_URL=http://zorro1-apm:8200
        - SERVICE_NAME=service3
        - PORT=80
      expose:
        - "80"
      ports:
        - "3003:80"
      networks:
        elkanet:
          aliases:
            - service2
      depends_on:
        apm-server:
          condition: service_started

networks:
  elkanet:
    driver: bridge
